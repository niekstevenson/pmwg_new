# update covariance matrix with adaptive MCMC
#################################################
if (i > 100) {
if (i==101) {
sigMat=cov(chains)
thetaM=apply(chains, 2, mean)
} else
{
tmp=update.cov(sigMat, i, thetaM, curValues, nPars)
sigMat=tmp$sigMat
thetaM=tmp$thetaM
}
}
###############################################
# Begin
# update epsilon using RM
###############################################
if (j>n0) {
epsilon<-update.epsilon(epsilon^2, acc, pstar, j, nPars, alpha)
i=i+1
epsilon.vec<-c(epsilon.vec, epsilon)
if ((j <= (iMax+n0)) && (Numbig<5 || Numsmall<5)) {
Toobig<- (epsilon > (3*epsilonStart))
Toosmall<-(epsilon < (epsilonStart/3))
if (Toobig || Toosmall) {
#restart the algorithm
cat("restart the program at", i, "th iteration", "\n")
epsilon.restart<-c(epsilon.restart, epsilon)
Numbig<- Numbig + Toobig
Numsmall <- Numsmall + Toosmall
j<-n0
epsilonStart <-epsilon
}
} #end iMax
}
}
return(list(chains = chains, epsilons = epsilon.vec, epsilonRestarts = epsilon.restart, accept = acc.vec))
} #end niter
library(rtdists)
b <- 1
t0 <- .15
mean_v <- c(2, 3)
sd_v <- .5
dat <- rLBA(500, A = 0, b = 1, t0 = .15, mean_v = c(2,3), sd_v = .5)
test <- mcmcTest(niter = 10000, startValues = rep(0, 2), epsilonStart = .5, data = dat)
accept<-test$accept[-1]
#calculate running mean acceptance rate
meanacc<-rep(NA, length(accept))
for (i in c(1:length(accept))) {
meanacc[i]=     mean(accept[round(i/2) :i])
}
burnin <- 500
#begin plot
############
par(mfrow=c(2,2))
plot(test$chains[,1], type="l", main = "trace plot of MCMC for parameter 1")
hist(test$chains[-c(1:burnin),1], probability=T)
abline(v = 1, lty = 2, col = "red", lwd = 3)
plot(test$epsilons, type="l", col=3, ylim=c(0, max(test$epsilons)), ylab="epsilon")
plot(meanacc, type="l", col=2, ylim=c(0,1), ylab="acceptance probability")
abline(h=0.234)
#
#
# program code for section 3.2, multivariate example
# here we update with a random walk using a multivariate normal distribution,
# with variance set to sigma^2*A, and tune the epsilon^2 parameter, and also adapt
# A using the second half of the chain, the example comes from Roberts and Rosenthal (examples
# of adaptive MCMC 2006)
#
# 	written by
# 	Y Fan
#	7th April 2012
#
#################################################################
#################################################################
# The following code could be adjusted for any multivariate example. The only
# necessary change is to change the function that gives the target distribution.
# You may well want to change the number of iterations in the Markov chain (niter)
# and the starting value for theta (the log of standard deviation of the proposal distribution).
# Less frequently you might want to change the target acceptance proability to something other
# than 0.234.
#
# The last lines in the program are optional and draw diagnostic plots that monitor
# the Robins Monro search.
#
# For more complicated problems that include multivariate RWMH, you might want to copy and paste
# parts of this code into your program so as to estimate the variance of a proposal distribution,
# rather than having to specify that variance. (Usually, little of your code need be deleted.)
################################################################################################
rm(list = ls())
cov.true <- 1
library(MASS)
library(mvtnorm)
#function which adjusts the value of theta at the ith iteration
update.epsilon<- function(epsilon2, acc, p, i, d, alpha) {
c=((1-1/d)*sqrt(2*pi)*exp(alpha^2/2)/(2*alpha) + 1/(d*p*(1-p)))
Theta=log(sqrt(epsilon2))
Theta=Theta+c*(acc-p)/max(200, i/d)
return(exp(Theta))
}
update.cov<-function(sigMat, i, thetaM, theta, d){
#function to recursively update covariance matrix, as part of adaptive MCMC sampling, updating the covariance matrix
epsilon=1/i
thetaM2=((thetaM*i)+theta)/(i+1)
sigMat=(i-1)/i*sigMat + thetaM%*%t(thetaM)-(i+1)/i*thetaM2%*%t(thetaM2)+1/i*theta%*%t(theta) + epsilon*diag(d)
return(list(sigMat=sigMat, thetaM=thetaM2))
}
#function that evaluations the target distribution
calc.target <- function(pars, data) {
return(dLBA(data$rt, data$response, A = 0, b = pars[1], t0 = .15,
mean_v = c(2, pars[2]), sd_v = .5, silent = T))
}
mcmcTest <- function(niter = 5000, startValues, data, epsilonStart){
#initialise the MCMC program
niter=niter      # niter is the number of iterations in the Markov chain.
# Change it to the value you want.
nPars <- length(startValues) #dimension of parameters to be updated
chains<- matrix(0, nrow = niter, ncol = nPars) #records all MCMC output for the parameters
chains[1,] <- curValues <- startValues
sigMat<-diag(nPars)  #initial proposal covariance matrix, can be changed if a better one is available
acc.vec<-rep(NA, niter) #records the acceptance probabilities from each MCMC iteration
pstar=0.234   #the optimal acceptance probability for the multivariate case
alpha=-qnorm(pstar/2) #Idk about this one
n0=round(5/(pstar*(1-pstar))) #Also not questioning this math for now
#iMax, is the max number of iterations before the last restart
iMax=100
Numbig=0
Numsmall=0
epsilon.vec <- epsilon <- epsilon.restart <- epsilonStart  #an arbitrary starting value for epsilon, equivalent to theta=ln(epsilon)=0
num.restart=0
i=1
#############################################
# End
#initialise the RM section
#############################################
for (j in c(2:niter)) {
#propose a new value of theta
proposal<-mvrnorm(1, mu=curValues, Sigma=(epsilon^2)*sigMat)
pi.old<- sum(log(calc.target(curValues, dat)))
pi.new<-sum(log(calc.target(proposal, dat)))
u<-runif(1)
acc=min(1, exp(pi.new - pi.old))
if(is.na(acc)) acc <- 0
acc.vec[j] <- acc
i=i+1
if (u < acc) {
curValues<-proposal
}
chains[j,]<- curValues
#################################################
# Begin
# update covariance matrix with adaptive MCMC
#################################################
if (i > 100) {
if (i==101) {
sigMat=cov(chains)
thetaM=apply(chains, 2, mean)
} else
{
tmp=update.cov(sigMat, i, thetaM, curValues, nPars)
sigMat=tmp$sigMat
thetaM=tmp$thetaM
}
}
###############################################
# Begin
# update epsilon using RM
###############################################
if (j>n0) {
epsilon<-update.epsilon(epsilon^2, acc, pstar, j, nPars, alpha)
i=i+1
epsilon.vec<-c(epsilon.vec, epsilon)
if ((j <= (iMax+n0)) && (Numbig<5 || Numsmall<5)) {
Toobig<- (epsilon > (3*epsilonStart))
Toosmall<-(epsilon < (epsilonStart/3))
if (Toobig || Toosmall) {
#restart the algorithm
cat("restart the program at", i, "th iteration", "\n")
epsilon.restart<-c(epsilon.restart, epsilon)
Numbig<- Numbig + Toobig
Numsmall <- Numsmall + Toosmall
j<-n0
epsilonStart <-epsilon
}
} #end iMax
}
}
return(list(chains = chains, epsilons = epsilon.vec, epsilonRestarts = epsilon.restart, accept = acc.vec))
} #end niter
library(rtdists)
b <- 1
t0 <- .15
mean_v <- c(2, 3)
sd_v <- .5
dat <- rLBA(500, A = 0, b = 1, t0 = .15, mean_v = c(2,3), sd_v = .5)
test <- mcmcTest(niter = 10000, startValues = rep(0, 2), epsilonStart = .5, data = dat)
accept<-test$accept[-1]
#calculate running mean acceptance rate
meanacc<-rep(NA, length(accept))
for (i in c(1:length(accept))) {
meanacc[i]=     mean(accept[round(i/2) :i])
}
burnin <- 500
#begin plot
############
par(mfrow=c(2,2))
plot(test$chains[,1], type="l", main = "trace plot of MCMC for parameter 1")
hist(test$chains[-c(1:burnin),1], probability=T)
abline(v = 1, lty = 2, col = "red", lwd = 3)
plot(test$epsilons, type="l", col=3, ylim=c(0, max(test$epsilons)), ylab="epsilon")
plot(meanacc, type="l", col=2, ylim=c(0,1), ylab="acceptance probability")
abline(h=0.234)
rm(list = ls())
library(rtdists)
source("pmwg/sampling.R")
log_likelihood=function(x,data,sample=TRUE) {
x=exp(x)
bs=x["A"]+x[c("b1","b2","b3")][data$condition]
if (sample) { #for sampling
out=rLBA(n=nrow(data),A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
} else { #for calculating density
out=dLBA(rt=data$rt,response=data$resp,A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
bad=(out<1e-10)|(!is.finite(out))
out[bad]=1e-10
out=sum(log(out))
}
out
}
n.trials = 75      #number trials per subject per conditions
n.subj = 5        #number of subjects
n.cond = 3          #number of conditions
names=c("subject","rt","resp","condition") #names of columns
data = data.frame(matrix(NA, ncol = length(names), nrow = (n.trials*n.subj*n.cond))) #empty data frame
names(data)=names
data$condition = rep(1:n.cond,times = n.trials) #filling in condition
data$subject = rep(1:n.subj, each = n.trials*n.cond) #filling in subjects
parameter.names=c("b1","b2","b3", "A","v1","v2","t0")
n.parameters=length(parameter.names)
ptm <- array(dim = n.parameters, dimnames = list(parameter.names)) #an empty array where i will put parameter values
ptm[1:n.parameters]=c(0.1,0.3,0.5,0.4,1.2,0.3,-2.4)
exp(ptm)
vars = abs(ptm)/10 #off diagonal correlations are done as absolute/10
sigmaC <- matrix(c(.8, .5, .4, .15, .15, .3, -.15,
.5, .8, .4, .2, .3, .3, .3,
.4, .4, .8, .1, .1, .2, .2,
.15, .2, .1, .8, .2, .2, .1,
.15, .3, .1, .2, .8, .5, .2,
.3, .3, .2, .2, .5, .8, .1,
-.15, .3, .2, .1, .2, .1, .8),
nrow=7,ncol=7)
###std dev correlation on diagonal - you might think this should be corr = 1, but it's actually the standard deviation
diag(sigmaC)=sqrt(vars)
sigmaC <- sdcor2cov(sigmaC)
subj_random_effects <- t(mvtnorm::rmvnorm(n.subj,mean=ptm,sigma=sigmaC))
for (i in 1:n.subj){
tmp<- log_likelihood(subj_random_effects[,i],sample=TRUE,data=data[data$subject==i,])
data$rt[data$subject==i]=tmp$rt
data$resp[data$subject==i]=tmp$response
}
pars <- rownames(subj_random_effects)
priors <- list(
theta_mu_mean = rep(0, length(pars)),
theta_mu_var = diag(rep(1, length(pars)))
)
# Create the Particle Metropolis within Gibbs sampler object ------------------
lba_loglike <- function(x, data, sample = FALSE) {
x <- exp(x)
if (any(data$rt < x["t0"])) {
return(-1e10)
}
if (sample){
data$rt=NA
data$resp = NA
}
bs <- x["A"] + x[c("b1", "b2", "b3")][data$condition]
if (sample) {
out <- rtdists::rLBA(n = nrow(data),
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = x[c("v1", "v2")],
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
data$rt <- out$rt
data$resp <- out$resp
} else {
out <- rtdists::dLBA(rt = data$rt,
response = data$resp,
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = list(x["v1"],x[ "v2"]),
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
bad <- (out < 1e-10) | (!is.finite(out))
out[bad] <- 1e-10
out <- sum(log(out))
}
if (sample){return(data)}
if (!sample){return(out)}
}
source("samplingSingleV2.R")
sampler <- pmwgs(
data = data,
pars = pars,
prior = priors,
ll_func = lba_loglike
)
setwd("Documents/UVA/2021/pmwg_new/")
rm(list = ls())
library(rtdists)
source("pmwg/sampling.R")
log_likelihood=function(x,data,sample=TRUE) {
x=exp(x)
bs=x["A"]+x[c("b1","b2","b3")][data$condition]
if (sample) { #for sampling
out=rLBA(n=nrow(data),A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
} else { #for calculating density
out=dLBA(rt=data$rt,response=data$resp,A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
bad=(out<1e-10)|(!is.finite(out))
out[bad]=1e-10
out=sum(log(out))
}
out
}
n.trials = 75      #number trials per subject per conditions
n.subj = 5        #number of subjects
n.cond = 3          #number of conditions
names=c("subject","rt","resp","condition") #names of columns
data = data.frame(matrix(NA, ncol = length(names), nrow = (n.trials*n.subj*n.cond))) #empty data frame
names(data)=names
data$condition = rep(1:n.cond,times = n.trials) #filling in condition
data$subject = rep(1:n.subj, each = n.trials*n.cond) #filling in subjects
parameter.names=c("b1","b2","b3", "A","v1","v2","t0")
n.parameters=length(parameter.names)
ptm <- array(dim = n.parameters, dimnames = list(parameter.names)) #an empty array where i will put parameter values
ptm[1:n.parameters]=c(0.1,0.3,0.5,0.4,1.2,0.3,-2.4)
exp(ptm)
vars = abs(ptm)/10 #off diagonal correlations are done as absolute/10
sigmaC <- matrix(c(.8, .5, .4, .15, .15, .3, -.15,
.5, .8, .4, .2, .3, .3, .3,
.4, .4, .8, .1, .1, .2, .2,
.15, .2, .1, .8, .2, .2, .1,
.15, .3, .1, .2, .8, .5, .2,
.3, .3, .2, .2, .5, .8, .1,
-.15, .3, .2, .1, .2, .1, .8),
nrow=7,ncol=7)
###std dev correlation on diagonal - you might think this should be corr = 1, but it's actually the standard deviation
diag(sigmaC)=sqrt(vars)
sigmaC <- sdcor2cov(sigmaC)
subj_random_effects <- t(mvtnorm::rmvnorm(n.subj,mean=ptm,sigma=sigmaC))
for (i in 1:n.subj){
tmp<- log_likelihood(subj_random_effects[,i],sample=TRUE,data=data[data$subject==i,])
data$rt[data$subject==i]=tmp$rt
data$resp[data$subject==i]=tmp$response
}
pars <- rownames(subj_random_effects)
priors <- list(
theta_mu_mean = rep(0, length(pars)),
theta_mu_var = diag(rep(1, length(pars)))
)
# Create the Particle Metropolis within Gibbs sampler object ------------------
lba_loglike <- function(x, data, sample = FALSE) {
x <- exp(x)
if (any(data$rt < x["t0"])) {
return(-1e10)
}
if (sample){
data$rt=NA
data$resp = NA
}
bs <- x["A"] + x[c("b1", "b2", "b3")][data$condition]
if (sample) {
out <- rtdists::rLBA(n = nrow(data),
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = x[c("v1", "v2")],
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
data$rt <- out$rt
data$resp <- out$resp
} else {
out <- rtdists::dLBA(rt = data$rt,
response = data$resp,
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = list(x["v1"],x[ "v2"]),
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
bad <- (out < 1e-10) | (!is.finite(out))
out[bad] <- 1e-10
out <- sum(log(out))
}
if (sample){return(data)}
if (!sample){return(out)}
}
source("samplingSingleV2.R")
sampler <- pmwgs(
data = data,
pars = pars,
prior = priors,
ll_func = lba_loglike
)
source("pmwg/samplingSingleV.R")
source("pmwg/samplingSingle.R")
rm(list = ls())
library(rtdists)
source("pmwg/sampling.R")
log_likelihood=function(x,data,sample=TRUE) {
x=exp(x)
bs=x["A"]+x[c("b1","b2","b3")][data$condition]
if (sample) { #for sampling
out=rLBA(n=nrow(data),A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
} else { #for calculating density
out=dLBA(rt=data$rt,response=data$resp,A=x["A"],b=bs,t0=x["t0"],mean_v=x[c("v1","v2")],sd_v=c(1,1),distribution="norm",silent=TRUE)
bad=(out<1e-10)|(!is.finite(out))
out[bad]=1e-10
out=sum(log(out))
}
out
}
n.trials = 75      #number trials per subject per conditions
n.subj = 5        #number of subjects
n.cond = 3          #number of conditions
names=c("subject","rt","resp","condition") #names of columns
data = data.frame(matrix(NA, ncol = length(names), nrow = (n.trials*n.subj*n.cond))) #empty data frame
names(data)=names
data$condition = rep(1:n.cond,times = n.trials) #filling in condition
data$subject = rep(1:n.subj, each = n.trials*n.cond) #filling in subjects
parameter.names=c("b1","b2","b3", "A","v1","v2","t0")
n.parameters=length(parameter.names)
ptm <- array(dim = n.parameters, dimnames = list(parameter.names)) #an empty array where i will put parameter values
ptm[1:n.parameters]=c(0.1,0.3,0.5,0.4,1.2,0.3,-2.4)
exp(ptm)
vars = abs(ptm)/10 #off diagonal correlations are done as absolute/10
sigmaC <- matrix(c(.8, .5, .4, .15, .15, .3, -.15,
.5, .8, .4, .2, .3, .3, .3,
.4, .4, .8, .1, .1, .2, .2,
.15, .2, .1, .8, .2, .2, .1,
.15, .3, .1, .2, .8, .5, .2,
.3, .3, .2, .2, .5, .8, .1,
-.15, .3, .2, .1, .2, .1, .8),
nrow=7,ncol=7)
###std dev correlation on diagonal - you might think this should be corr = 1, but it's actually the standard deviation
diag(sigmaC)=sqrt(vars)
sigmaC <- sdcor2cov(sigmaC)
subj_random_effects <- t(mvtnorm::rmvnorm(n.subj,mean=ptm,sigma=sigmaC))
for (i in 1:n.subj){
tmp<- log_likelihood(subj_random_effects[,i],sample=TRUE,data=data[data$subject==i,])
data$rt[data$subject==i]=tmp$rt
data$resp[data$subject==i]=tmp$response
}
pars <- rownames(subj_random_effects)
priors <- list(
theta_mu_mean = rep(0, length(pars)),
theta_mu_var = diag(rep(1, length(pars)))
)
# Create the Particle Metropolis within Gibbs sampler object ------------------
lba_loglike <- function(x, data, sample = FALSE) {
x <- exp(x)
if (any(data$rt < x["t0"])) {
return(-1e10)
}
if (sample){
data$rt=NA
data$resp = NA
}
bs <- x["A"] + x[c("b1", "b2", "b3")][data$condition]
if (sample) {
out <- rtdists::rLBA(n = nrow(data),
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = x[c("v1", "v2")],
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
data$rt <- out$rt
data$resp <- out$resp
} else {
out <- rtdists::dLBA(rt = data$rt,
response = data$resp,
A = x["A"],
b = bs,
t0 = x["t0"],
mean_v = list(x["v1"],x[ "v2"]),
sd_v = c(1, 1),
distribution = "norm",
silent = TRUE)
bad <- (out < 1e-10) | (!is.finite(out))
out[bad] <- 1e-10
out <- sum(log(out))
}
if (sample){return(data)}
if (!sample){return(out)}
}
source("pmwg/samplingSingle.R")
sampler <- pmwgs(
data = data,
pars = pars,
prior = priors,
ll_func = lba_loglike
)
sampler <- init_single(sampler, n_cores = 1) # i don't use any start points here
# Sample! -------------------------------------------------------------------
burned <- run_stage_single(sampler, stage = "burn",iter = 1000, particles = 100, n_cores = 16, pstar = .7)
